name: Publish to npm on publish branch

on:
  push:
    branches:
      - publish
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual publish'
        required: false
        default: 'Manual publish'

jobs:
  publish:
    name: Build, Test, and Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate version from date
        id: version
        run: |
          # Generate version in format YYYY.M.D-NNN (e.g., 2025.10.30-001)
          DATE=$(date -u +"%Y.%-m.%-d")
          
          # Fetch all tags to find existing releases for today
          git fetch --tags
          
          # Get all published versions from npm for today's date
          NPM_VERSIONS=$(npm view directus-extension-getstream-io versions --json 2>/dev/null || echo "[]")
          TODAY_VERSIONS=$(echo "$NPM_VERSIONS" | jq -r ".[] | select(startswith(\"${DATE}-\"))" | wc -l | tr -d ' ')
          
          # Count existing git tags for today's date
          TAG_COUNT=$(git tag -l "v${DATE}-*" | wc -l | tr -d ' ')
          
          # Use the higher count to avoid conflicts
          if [ "$TODAY_VERSIONS" -gt "$TAG_COUNT" ]; then
            COUNT=$TODAY_VERSIONS
          else
            COUNT=$TAG_COUNT
          fi
          
          # Increment counter for new release
          COUNTER=$((COUNT + 1))
          
          # Format counter with leading zeros (001, 002, etc.)
          COUNTER_FORMATTED=$(printf "%03d" $COUNTER)
          
          VERSION="${DATE}-${COUNTER_FORMATTED}"
          
          # Final safety check if this exact version already exists on npm
          while npm view directus-extension-getstream-io@${VERSION} version 2>/dev/null; do
            echo "‚ö†Ô∏è Version ${VERSION} already exists on npm, incrementing..."
            COUNTER=$((COUNTER + 1))
            COUNTER_FORMATTED=$(printf "%03d" $COUNTER)
            VERSION="${DATE}-${COUNTER_FORMATTED}"
          done
          
          echo "Generated version: $VERSION (release #${COUNTER} for ${DATE})"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          # Update version in package.json
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.version.outputs.version }}"

      - name: Build
        run: yarn build

      - name: Run tests
        run: yarn test

      - name: Lint
        run: yarn lint

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Log manual trigger reason if provided
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual publish triggered: ${{ github.event.inputs.reason }}";
          fi
          
          # Ensure the token is available and publish
          if [ -z "${NODE_AUTH_TOKEN}" ]; then
            echo "NPM_TOKEN is not set. Set repository secret NPM_TOKEN to publish.";
            exit 1;
          fi
          
          echo "Publishing version ${{ steps.version.outputs.version }} to npm..."
          # Publish package (public access). The environment variable above
          # is used by npm to authenticate automatically.
          npm publish --access public
          
          echo "‚úÖ Successfully published version ${{ steps.version.outputs.version }}"

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Extract latest changelog
        id: changelog
        run: |
          # Extract the Unreleased section from CHANGELOG.md
          if [ -f "docs/CHANGELOG.md" ]; then
            # Get content between ## [Unreleased] and the next ## heading
            CHANGELOG=$(awk '/## \[Unreleased\]/,/## \[/' docs/CHANGELOG.md | sed '1d;$d' | sed '/^$/d')
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="No changelog entries found."
            fi
          else
            CHANGELOG="No changelog available."
          fi
          # Save to output using multiline string
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          generate_release_notes: true
          body: |
            ## üì¶ Published to npm
            
            **Version:** `${{ steps.version.outputs.version }}`
            **Published:** ${{ github.event.head_commit.timestamp }}
            **Package:** [npmjs.com/package/directus-extension-getstream-io](https://www.npmjs.com/package/directus-extension-getstream-io)
            
            Install this version:
            ```bash
            npm install directus-extension-getstream-io@${{ steps.version.outputs.version }}
            ```
            
            ${{ github.event_name == 'workflow_dispatch' && format('**Trigger reason:** {0}', github.event.inputs.reason) || '' }}
            
            ## üìù Changelog
            
            ${{ steps.changelog.outputs.content }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
